<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GPIO输出和输入</title>
      <link href="/2024/12/18/gpio-shu-chu-he-shu-ru/"/>
      <url>/2024/12/18/gpio-shu-chu-he-shu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32入门教程（江协）"><a href="#STM32入门教程（江协）" class="headerlink" title="STM32入门教程（江协）"></a>STM32入门教程（江协）</h1><h2 id="3-1-GPIO输出"><a href="#3-1-GPIO输出" class="headerlink" title="3-1 GPIO输出"></a>3-1 GPIO输出</h2><ol><li><p>GPIO 简介</p><ul><li>GPIO（General Purpose Input Output）通用输入输出口</li><li>可配置为8种输入输出模式</li><li>引脚电平：0V~3.3V，部分引脚可容忍5V</li><li>输出模式下可控制端口输出高低电平，用以驱动LED、控制蜂鸣器、模拟通信协议输出时序等</li><li>输入模式下可读取端口的高低电平或电压，用于读取按键输入、外接模块电平信号输入、ADC电压采集、模拟通信协议接收数据等</li></ul></li><li><p>GPIO基本结构</p><p>全都挂载在APB2总线上，每个GPI&#x2F;O端口有两个32位配置寄存器(GPIOx_CRL，GPIOx_CRH，<strong>4位配置一个端口</strong>)，两个32位数据寄存器(GPIOx_IDR和GPIOx_ODR，<strong>低16位有效</strong>)，一个32位置位&#x2F;复位寄存器(GPIOx_BSRR，<strong>高16位进行位清除，低16位进行位设置</strong>)，一个16位复位寄存器(GPIOx_BRR，<strong>相当于GPIOx_BSRR的高16位</strong>，<strong>同步性要求不高的话可以使用</strong>)和一个32位锁定寄存器(GPIOx_LCKR)。</p><p><img src="https://pic.imgdb.cn/item/67617a2fd0e0a243d4e5843d.png"></p></li><li><p>GPIO位结构</p><p><img src="https://pic.imgdb.cn/item/67617b8ad0e0a243d4e584b2.png"></p><ul><li>保护二极管使得输入电压在0~3.3v之间</li><li>上拉（高电平）、下拉（低电平）、浮空</li><li>施密特触发器对输入电压进行整形：如果输入电压大于某一上阈值，输出就会瞬间升为高电平；如果输入电压小于某一下阈值，输出就会瞬间降为低电平；在两个阈值之间的会维持原有输出电压。能有效的避免信号产生的抖动。</li><li>经过施密特触发器整形的波形就可以直接写入输入数据寄存器了，再用程序读取输入数据寄存器对应某一位的数据，就能知道端口的输入电平了</li><li>模拟输入（连接到ADC上）；复用功能输入，可以接到其他需要读取端口的外设上的，比如串口的输入引脚等，这个线接收的是数字量，所以在施密特触发器后面</li><li>输出数字部分可以由输出数据寄存器或片上外设控制；位设置&#x2F;清除寄存器可以用来单独操作输出数据寄存器的某一位，而不影响其它位。</li><li>在推挽输出模式下，P-MOS和N-MOS均有效，数据寄存器为1时，上管导通，下管断开，输出直接接到VDD，就是输出高电平；数据寄存器为0时，输出低电平；这种模式下，高低电平均有较强的驱动能力。</li><li>在开漏输出模式下，P-MOS是无效的，只有N-MOS在工作，数据寄存器为1时，下管断开，这时输出相当于断开，也就是高阻模式（开路）；数据寄存器为0时，下管导通，输出直接接到VSS，也就是输出低电平。这种模式下只有低电平有驱动能力，高电平是没有驱动能力的。I2C通信的引脚，就是使用的开漏模式，在多机通信的情况下，这个模式可以避免各个设备的相互干扰。该模式还可以输出5V的电平信号。</li><li>输出关闭时，用于输入。</li></ul></li><li><p>GPIO模式</p><table><thead><tr><th><strong>模式名称</strong></th><th><strong>性质</strong></th><th><strong>特征</strong></th></tr></thead><tbody><tr><td>浮空输入</td><td>数字输入</td><td>可读取引脚电平，若引脚悬空，则电平不确定</td></tr><tr><td>上拉输入</td><td>数字输入</td><td>可读取引脚电平，内部连接上拉电阻，悬空时默认高电平</td></tr><tr><td>下拉输入</td><td>数字输入</td><td>可读取引脚电平，内部连接下拉电阻，悬空时默认低电平</td></tr><tr><td>模拟输入</td><td>模拟输入</td><td>GPIO无效，引脚直接接入内部ADC</td></tr><tr><td>开漏输出</td><td>数字输出</td><td>可输出引脚电平，高电平为高阻态，低电平接VSS</td></tr><tr><td>推挽输出</td><td>数字输出</td><td>可输出引脚电平，高电平接VDD，低电平接VSS</td></tr><tr><td>复用开漏输出</td><td>数字输出</td><td>由片上外设控制，高电平为高阻态，低电平接VSS</td></tr><tr><td>复用推挽输出</td><td>数字输出</td><td>由片上外设控制，高电平接VDD，低电平接VSS</td></tr></tbody></table><blockquote><p>输入时，输出是断开的；输出时，也可以输入</p><p>GPIO的这8种模式中，出了模拟输入这个模式会关闭数字寄存器的输入功能，其他7个模式中，所有的输入都是有效的</p></blockquote></li><li><p>LED和蜂鸣器介绍</p><ul><li><p>LED：发光二极管，正向通电点亮，反向通电不亮；长引脚为正</p></li><li><p>有源蜂鸣器：内部自带振荡源，将正负极接上直流电压即可持续发声，频率固定。</p><p>2引脚接低电平，蜂鸣器发声，接高电平，蜂鸣器关闭。</p><p><img src="https://pic.imgdb.cn/item/676187e5d0e0a243d4e5882d.png"></p><p>高电平弱驱动、低电平强驱动</p></li></ul></li></ol><h2 id="LED闪烁-LED流水灯-蜂鸣器"><a href="#LED闪烁-LED流水灯-蜂鸣器" class="headerlink" title="LED闪烁&amp;LED流水灯&amp;蜂鸣器"></a>LED闪烁&amp;LED流水灯&amp;蜂鸣器</h2><h3 id="LED闪烁代码"><a href="#LED闪烁代码" class="headerlink" title="LED闪烁代码"></a>LED闪烁代码</h3><blockquote><p>新建一个System文件夹，用于存放Delay.c和Delay.h，头文件包含System目录；低电平驱动.</p><p>接线图：<a href="https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-1%20LED%E9%97%AA%E7%83%81.jpg" target="_blank" rel="noopener">https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-1%20LED%E9%97%AA%E7%83%81.jpg</a></p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开启时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启GPIOA的时钟</span>                                                            <span class="token comment" spellcheck="true">//使用各个外设前必须开启时钟，否则对外设的操作无效</span>        <span class="token comment" spellcheck="true">/*GPIO初始化*/</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义结构体变量</span>        GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO模式，赋值为推挽输出模式</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO引脚，赋值为第0号引脚</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO速度，赋值为50MHz</span>        <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将赋值后的构体变量传递给GPIO_Init函数</span>                                                            <span class="token comment" spellcheck="true">//函数内部会自动根据结构体的参数配置相应寄存器</span>                                                            <span class="token comment" spellcheck="true">//实现GPIOA的初始化</span>        <span class="token comment" spellcheck="true">/*主循环，循环体内的代码会一直循环执行*/</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*设置PA0引脚的高低电平，实现LED闪烁，下面展示3种方法*/</span>                <span class="token comment" spellcheck="true">/*方法1：GPIO_ResetBits设置低电平，GPIO_SetBits设置高电平*/</span>        <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PA0引脚设置为低电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时500ms</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PA0引脚设置为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时500ms</span>                <span class="token comment" spellcheck="true">/*方法2：GPIO_WriteBit设置低/高电平，由Bit_RESET/Bit_SET指定*/</span>        <span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> Bit_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PA0引脚设置为低电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时500ms</span>        <span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> Bit_SET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PA0引脚设置为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时500ms</span>                <span class="token comment" spellcheck="true">/*方法3：GPIO_WriteBit设置低/高电平，由数据0/1指定，数据需要强转为BitAction类型*/</span>        <span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> <span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PA0引脚设置为低电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时500ms</span>        <span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> <span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PA0引脚设置为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时500ms</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LED流水灯"><a href="#LED流水灯" class="headerlink" title="LED流水灯"></a>LED流水灯</h3><blockquote><p>接线图：<a href="https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-2%20LED%E6%B5%81%E6%B0%B4%E7%81%AF.jpg" target="_blank" rel="noopener">https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-2%20LED%E6%B5%81%E6%B0%B4%E7%81%AF.jpg</a></p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开启时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启GPIOA的时钟</span>                                                            <span class="token comment" spellcheck="true">//使用各个外设前必须开启时钟，否则对外设的操作无效</span>        <span class="token comment" spellcheck="true">/*GPIO初始化*/</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义结构体变量</span>        GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO模式，赋值为推挽输出模式</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_All<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO引脚，赋值为所有引脚</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO速度，赋值为50MHz</span>        <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将赋值后的构体变量传递给GPIO_Init函数</span>                                                            <span class="token comment" spellcheck="true">//函数内部会自动根据结构体的参数配置相应寄存器</span>                                                            <span class="token comment" spellcheck="true">//实现GPIOA的初始化</span>        <span class="token comment" spellcheck="true">/*主循环，循环体内的代码会一直循环执行*/</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*使用GPIO_Write，同时设置GPIOA所有引脚的高低电平，实现LED流水灯*/</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 0000 0001，PA0引脚为低电平，其他引脚均为高电平，注意数据有按位取反</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 0000 0010，PA1引脚为低电平，其他引脚均为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0004</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 0000 0100，PA2引脚为低电平，其他引脚均为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0008</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 0000 1000，PA3引脚为低电平，其他引脚均为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0010</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 0001 0000，PA4引脚为低电平，其他引脚均为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0020</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 0010 0000，PA5引脚为低电平，其他引脚均为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0040</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 0100 0000，PA6引脚为低电平，其他引脚均为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0000 1000 0000，PA7引脚为低电平，其他引脚均为高电平</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h3><blockquote><p>选择PB12端口，低电平驱动；不要选A15、B3、B4(为JTAG调试端口)</p><p><a href="https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-3%20%E8%9C%82%E9%B8%A3%E5%99%A8.jpg" target="_blank" rel="noopener">https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-3%20%E8%9C%82%E9%B8%A3%E5%99%A8.jpg</a></p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开启时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启GPIOB的时钟</span>                                                            <span class="token comment" spellcheck="true">//使用各个外设前必须开启时钟，否则对外设的操作无效</span>        <span class="token comment" spellcheck="true">/*GPIO初始化*/</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义结构体变量</span>        GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO模式，赋值为推挽输出模式</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_12<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO引脚，赋值为第12号引脚</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GPIO速度，赋值为50MHz</span>        <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将赋值后的构体变量传递给GPIO_Init函数</span>                                                            <span class="token comment" spellcheck="true">//函数内部会自动根据结构体的参数配置相应寄存器</span>                                                            <span class="token comment" spellcheck="true">//实现GPIOB的初始化</span>        <span class="token comment" spellcheck="true">/*主循环，循环体内的代码会一直循环执行*/</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PB12引脚设置为低电平，蜂鸣器鸣叫</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PB12引脚设置为高电平，蜂鸣器停止</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PB12引脚设置为低电平，蜂鸣器鸣叫</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时100ms</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PB12引脚设置为高电平，蜂鸣器停止</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时700ms</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>补充：不懂的库函数可以参考“<strong>STM32F103xx固件函数库用户手册</strong>”</p></blockquote><h2 id="3-3-GPIO输入"><a href="#3-3-GPIO输入" class="headerlink" title="3-3 GPIO输入"></a>3-3 GPIO输入</h2><ol><li><p>按键介绍</p><ul><li>常见的输入设备，按下导通，松手断开</li><li>按键抖动：由于按键内部使用的是机械式弹簧片来进行通断的，所以在按下和松手的瞬间会伴随有一连串的抖动。可以通过前后延时来进行消抖。</li></ul></li><li><p>传感器模块简介</p><p>传感器模块：传感器元件（光敏电阻&#x2F;热敏电阻&#x2F;红外接收管等）的电阻会随外界模拟量的变化而变化，通过与定值电阻分压即可得到模拟电压输出，再通过电压比较器进行二值化即可得到数字电压输出。</p><p><img src="https://pic.imgdb.cn/item/67622d02d0e0a243d4e5982d.png"></p></li><li><p>硬件电路</p><p><img src="https://pic.imgdb.cn/item/67622dccd0e0a243d4e59858.png"></p></li><li><p>C语言数据类型</p><table><thead><tr><th><strong>关键字</strong></th><th><strong>位数</strong></th><th><strong>表示范围</strong></th><th><strong>stdint****关键字</strong></th><th><strong>ST****关键字</strong></th></tr></thead><tbody><tr><td>char</td><td>8</td><td>-128 ~ 127</td><td>int8_t</td><td>s8</td></tr><tr><td>unsigned char</td><td>8</td><td>0 ~ 255</td><td>uint8_t</td><td>u8</td></tr><tr><td>short</td><td>16</td><td>-32768 ~ 32767</td><td>int16_t</td><td>s16</td></tr><tr><td>unsigned short</td><td>16</td><td>0 ~ 65535</td><td>uint16_t</td><td>u16</td></tr><tr><td>int</td><td>32</td><td>-2147483648 ~ 2147483647</td><td>int32_t</td><td>s32</td></tr><tr><td>unsigned int</td><td>32</td><td>0 ~ 4294967295</td><td>uint32_t</td><td>u32</td></tr><tr><td>long</td><td>32</td><td>-2147483648 ~ 2147483647</td><td></td><td></td></tr><tr><td>unsigned long</td><td>32</td><td>0 ~ 4294967295</td><td></td><td></td></tr><tr><td>long long</td><td>64</td><td>-(2^64)&#x2F;2 ~ (2^64)&#x2F;2-1</td><td>int64_t</td><td></td></tr><tr><td>unsigned long long</td><td>64</td><td>0 ~ (2^64)-1</td><td>uint64_t</td><td></td></tr><tr><td>float</td><td>32</td><td>-3.4e38 ~ 3.4e38</td><td></td><td></td></tr><tr><td>double</td><td>64</td><td>-1.7e308 ~ 1.7e308</td><td></td><td></td></tr></tbody></table></li><li><p>C语言宏定义</p><ul><li>关键字：#define</li><li>用途：用一个字符串代替一个数字，便于理解，防止出错；提取程序中经常出现的参数，便于快速修改</li><li>定义宏定义：#define ABC 12345</li><li>引用宏定义：int a &#x3D; ABC;&#x2F;&#x2F;等效于int a &#x3D; 12345;</li></ul></li><li><p>C语言typedef</p><ul><li>关键字：typedef</li><li>用途：将一个比较长的变量类型名换个名字，便于使用</li><li>定义typedef：typedef unsigned char uint8_t;</li><li>引用typedef： uint8_t a;&#x2F;&#x2F;等效于unsigned char a;</li></ul></li><li><p>C语言结构体</p><pre class="line-numbers language-c"><code class="language-c">关键字：<span class="token keyword">struct</span>用途：数据打包，不同类型变量的集合定义结构体变量：    <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> x<span class="token punctuation">;</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span> <span class="token keyword">float</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span> StructName<span class="token punctuation">;</span>    因为结构体变量类型较长，所以通常用<span class="token keyword">typedef</span>更改变量类型名引用结构体成员：    StructName<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    StructName<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>    StructName<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">1.23</span><span class="token punctuation">;</span>或pStructName<span class="token operator">-></span>x <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pStructName为结构体的地址pStructName->y = 66;</span>    pStructName<span class="token operator">-></span>z <span class="token operator">=</span> <span class="token number">1.23</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>C语言枚举</p><pre class="line-numbers language-c"><code class="language-c">关键字：<span class="token keyword">enum</span>用途：定义一个取值受限制的整型变量，用于限制变量取值范围；宏定义的集合定义枚举变量：    <span class="token keyword">enum</span><span class="token punctuation">{</span>FALSE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> TRUE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span> EnumName<span class="token punctuation">;</span>    因为枚举变量类型较长，所以通常用<span class="token keyword">typedef</span>更改变量类型名引用枚举成员：    EnumName <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    EnumName <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-4-按键控制LED-光敏传感器控制蜂鸣器"><a href="#3-4-按键控制LED-光敏传感器控制蜂鸣器" class="headerlink" title="3-4 按键控制LED&amp;光敏传感器控制蜂鸣器"></a>3-4 按键控制LED&amp;光敏传感器控制蜂鸣器</h2><h3 id="按键控制LED"><a href="#按键控制LED" class="headerlink" title="按键控制LED"></a>按键控制LED</h3><blockquote><p>新增了Hardware目录，包含<code>LED.h、LED.c、Key.h、Key.c</code>，在Keil里增加Hardware组，头文件包含该目录</p><p>接线图：<a href="https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-4%20%E6%8C%89%E9%94%AE%E6%8E%A7%E5%88%B6LED.jpg" target="_blank" rel="noopener">https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-4%20%E6%8C%89%E9%94%AE%E6%8E%A7%E5%88%B6LED.jpg</a></p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// main.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LED.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Key.h"</span></span>uint8_t KeyNum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义用于接收按键键码的变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*模块初始化*/</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LED初始化</span>    <span class="token function">Key_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按键初始化</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">Key_GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取按键键码</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按键1按下</span>        <span class="token punctuation">{</span>            <span class="token function">LED1_Turn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LED1翻转</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按键2按下</span>        <span class="token punctuation">{</span>            <span class="token function">LED2_Turn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LED2翻转</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// LED.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __LED_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __LED_H</span><span class="token keyword">void</span> <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LED1_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LED1_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LED1_Turn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LED2_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LED2_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LED2_Turn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// LED.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token comment" spellcheck="true">/**  * 函    数：LED初始化  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开启时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启GPIOA的时钟</span>        <span class="token comment" spellcheck="true">/*GPIO初始化*/</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_1 <span class="token operator">|</span> GPIO_Pin_2<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PA1和PA2引脚初始化为推挽输出</span>        <span class="token comment" spellcheck="true">/*设置GPIO初始化后的默认电平*/</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_1 <span class="token operator">|</span> GPIO_Pin_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PA1和PA2引脚为高电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：LED1开启  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LED1_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PA1引脚为低电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：LED1关闭  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LED1_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PA1引脚为高电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：LED1状态翻转  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LED1_Turn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadOutputDataBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取输出寄存器的状态，如果当前引脚输出低电平</span>    <span class="token punctuation">{</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//则设置PA1引脚为高电平</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则，即当前引脚输出高电平</span>    <span class="token punctuation">{</span>        <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//则设置PA1引脚为低电平</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：LED2开启  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LED2_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PA2引脚为低电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：LED2关闭  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LED2_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PA2引脚为高电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：LED2状态翻转  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LED2_Turn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadOutputDataBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取输出寄存器的状态，如果当前引脚输出低电平</span>    <span class="token punctuation">{</span>                                                          <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_2<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//则设置PA2引脚为高电平</span>    <span class="token punctuation">}</span>                                                      <span class="token keyword">else</span>                                               <span class="token comment" spellcheck="true">//否则，即当前引脚输出高电平</span>    <span class="token punctuation">{</span>                                                          <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//则设置PA2引脚为低电平</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Key.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __KEY_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __KEY_H</span><span class="token keyword">void</span> <span class="token function">Key_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">Key_GetNum</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// key.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token comment" spellcheck="true">/**  * 函    数：按键初始化  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">Key_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开启时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启GPIOB的时钟</span>        <span class="token comment" spellcheck="true">/*GPIO初始化*/</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_1 <span class="token operator">|</span> GPIO_Pin_11<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PB1和PB11引脚初始化为上拉输入</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：按键获取键码  * 参    数：无  * 返 回 值：按下按键的键码值，范围：0~2，返回0代表没有按键按下  * 注意事项：此函数是阻塞式操作，当按键按住不放时，函数会卡住，直到按键松手  */</span>uint8_t <span class="token function">Key_GetNum</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t KeyNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义变量，默认键码值为0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读PB1输入寄存器的状态，如果为0，则代表按键1按下</span>    <span class="token punctuation">{</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时消抖</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待按键松手</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时消抖</span>        KeyNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//置键码为1</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_11<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读PB11输入寄存器的状态，如果为0，则代表按键2按下</span>    <span class="token punctuation">{</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时消抖</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_11<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待按键松手</span>        <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时消抖</span>        KeyNum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//置键码为2</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> KeyNum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回键码值，如果没有按键按下，所有if都不成立，则键码为默认值0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="光敏传感器控制蜂鸣器"><a href="#光敏传感器控制蜂鸣器" class="headerlink" title="光敏传感器控制蜂鸣器"></a>光敏传感器控制蜂鸣器</h3><blockquote><p>在Hardware目录添加<code>Buzzer.h、Buzzer.c、LightSensor.h、LightSensor.c</code>文件</p><p>接线图：<a href="https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-5%20%E5%85%89%E6%95%8F%E4%BC%A0%E6%84%9F%E5%99%A8%E6%8E%A7%E5%88%B6%E8%9C%82%E9%B8%A3%E5%99%A8.jpg" target="_blank" rel="noopener">https://github.com/404djl/stm32_source/blob/main/1-1%20%E6%8E%A5%E7%BA%BF%E5%9B%BE/3-5%20%E5%85%89%E6%95%8F%E4%BC%A0%E6%84%9F%E5%99%A8%E6%8E%A7%E5%88%B6%E8%9C%82%E9%B8%A3%E5%99%A8.jpg</a></p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// main.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Buzzer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LightSensor.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*模块初始化*/</span>    <span class="token function">Buzzer_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//蜂鸣器初始化</span>    <span class="token function">LightSensor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//光敏传感器初始化</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LightSensor_Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果当前光敏输出1</span>        <span class="token punctuation">{</span>            <span class="token function">Buzzer_ON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//蜂鸣器开启</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则</span>        <span class="token punctuation">{</span>            <span class="token function">Buzzer_OFF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//蜂鸣器关闭</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Buzzer.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __BUZZER_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __BUZZER_H</span><span class="token keyword">void</span> <span class="token function">Buzzer_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Buzzer_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Buzzer_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Buzzer_Turn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Buzzer.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token comment" spellcheck="true">/**  * 函    数：蜂鸣器初始化  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">Buzzer_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开启时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启GPIOB的时钟</span>        <span class="token comment" spellcheck="true">/*GPIO初始化*/</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_12<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PB12引脚初始化为推挽输出</span>        <span class="token comment" spellcheck="true">/*设置GPIO初始化后的默认电平*/</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PB12引脚为高电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：蜂鸣器开启  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">Buzzer_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PB12引脚为低电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：蜂鸣器关闭  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">Buzzer_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PB12引脚为高电平</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：蜂鸣器状态翻转  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">Buzzer_Turn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadOutputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取输出寄存器的状态，如果当前引脚输出低电平</span>    <span class="token punctuation">{</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//则设置PB12引脚为高电平</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则，即当前引脚输出高电平</span>    <span class="token punctuation">{</span>        <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//则设置PB12引脚为低电平</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// LightSensor.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __LIGHT_SENSOR_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __LIGHT_SENSOR_H</span><span class="token keyword">void</span> <span class="token function">LightSensor_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">LightSensor_Get</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// LightSensor.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                  </span><span class="token comment" spellcheck="true">// Device header</span><span class="token comment" spellcheck="true">/**  * 函    数：光敏传感器初始化  * 参    数：无  * 返 回 值：无  */</span><span class="token keyword">void</span> <span class="token function">LightSensor_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开启时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启GPIOB的时钟</span>        <span class="token comment" spellcheck="true">/*GPIO初始化*/</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_13<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将PB13引脚初始化为上拉输入</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 函    数：获取当前光敏传感器输出的高低电平  * 参    数：无  * 返 回 值：光敏传感器输出的高低电平，范围：0/1  */</span>uint8_t <span class="token function">LightSensor_Get</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_13<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回PB13输入寄存器的状态</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> GPIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32介绍和工程环境配置</title>
      <link href="/2024/12/17/stm32-jie-shao-he-gong-cheng-huan-jing-pei-zhi/"/>
      <url>/2024/12/17/stm32-jie-shao-he-gong-cheng-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32入门教程（江协）"><a href="#STM32入门教程（江协）" class="headerlink" title="STM32入门教程（江协）"></a>STM32入门教程（江协）</h1><h2 id="1-1-课程简介"><a href="#1-1-课程简介" class="headerlink" title="1-1 课程简介"></a>1-1 课程简介</h2><p>硬件平台：STM32最小系统板+面包板硬件平台</p><p>软件设备：Keil5 MDK(给ARM系列的单片机编程的)</p><h2 id="1-2-STM32简介"><a href="#1-2-STM32简介" class="headerlink" title="1-2 STM32简介"></a>1-2 STM32简介</h2><ol><li><p>STM32简介</p><ul><li>STM32是ST公司基于ARM Cortex-M内核开发的32位微控制器</li><li>STM32常应用在嵌入式领域，如智能车、无人机、机器人、无线通信、物联网、工业控制、娱乐电子产品等</li><li>STM32功能强大、性能优异、片上资源丰富、功耗低，是一款经典的嵌入式微控制器</li></ul><p><img src="https://www.st.com.cn/content/dam/category-pages/stm32-32-bit-arm-cortex-mcus/arm_cortex_mcu_portfolio_new.jpg"></p></li><li><p>ARM</p><ul><li>ARM既指ARM公司，也指ARM处理器内核</li><li>ARM公司是全球领先的半导体知识产权（IP）提供商，全世界超过95%的智能手机和平板电脑都采用ARM架构</li><li>ARM公司设计ARM内核，半导体厂商完善内核周边电路并生产芯片</li></ul><p><img src="https://pic.imgdb.cn/item/67612b42d0e0a243d4e52734.png"></p></li><li><p>STM32F103C8T6</p><ul><li>系列：主流系列STM32F1</li><li>内核：ARM Cortex-M3</li><li>主频：72MHz</li><li>RAM：20K(SRAM)</li><li>ROM: 64K(Flash)</li><li>供电：2.0~3.6V（标准3.3V)</li><li>封装：LQFP48</li></ul></li><li><p>片上资源&#x2F;外设</p><table><thead><tr><th align="center">英文缩写</th><th align="center">名称</th><th align="center">英文缩写</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center"><strong>NVIC</strong></td><td align="center"><strong>嵌套向量中断控制器</strong></td><td align="center">CAN</td><td align="center">CAN通信</td></tr><tr><td align="center"><strong>SysTick</strong></td><td align="center"><strong>系统滴答定时器</strong></td><td align="center">USB</td><td align="center">USB通信</td></tr><tr><td align="center">RCC</td><td align="center">复位和时钟控制</td><td align="center">RTC</td><td align="center">实时时钟</td></tr><tr><td align="center">GPIO</td><td align="center">通用IO口</td><td align="center">CRC</td><td align="center">CRC校验</td></tr><tr><td align="center">AFIO</td><td align="center">复用IO口</td><td align="center">PWR</td><td align="center">电源控制</td></tr><tr><td align="center">EXTI</td><td align="center">外部中断</td><td align="center">BKP</td><td align="center">备份寄存器</td></tr><tr><td align="center">TIM</td><td align="center">定时器</td><td align="center">IWDG</td><td align="center">独立看门狗</td></tr><tr><td align="center">ADC</td><td align="center">模数转换器</td><td align="center">WWDG</td><td align="center">窗口看门狗</td></tr><tr><td align="center">DMA</td><td align="center">直接内存访问</td><td align="center">DAC</td><td align="center">数模转换器</td></tr><tr><td align="center">USART</td><td align="center">同步&#x2F;异步串口通信</td><td align="center">SDIO</td><td align="center">SD卡接口</td></tr><tr><td align="center">I2C</td><td align="center">I2C通信</td><td align="center">FSMC</td><td align="center">可变静态存储控制器</td></tr><tr><td align="center">SPI</td><td align="center">SPI通信</td><td align="center">USB OTG</td><td align="center">USB主机接口</td></tr></tbody></table></li><li><p>命名规则</p><p><img src="https://shequ.stmicroelectronics.cn/data/attachment/forum/201709/16/151144mewf6r62wppxpefe.jpg"></p></li><li><p>系统结构</p><p><img src="https://raw.githubusercontent.com/flyingBridzz/flyingBridzz.github.io/master/_posts/image/STM32%E7%B3%BB%E7%BB%9F%E6%9E%84%E6%9E%B6/1.png"></p></li><li><p>引脚定义</p><p><img src="https://pic.imgdb.cn/item/67619080d0e0a243d4e589df.png"></p></li><li><p>启动配置</p><p><img src="https://pic.imgdb.cn/item/676128ecd0e0a243d4e5227a.png"></p></li><li><p>最小系统电路</p><p><img src="https://pic.imgdb.cn/item/67612c0cd0e0a243d4e528d2.png"></p></li></ol><h2 id="2-1-软件安装"><a href="#2-1-软件安装" class="headerlink" title="2-1 软件安装"></a>2-1 软件安装</h2><p><a href="https://www.bilibili.com/video/BV1th411z7sn?spm_id_from=333.788.videopod.episodes&vd_source=6c74875e4fc2627ae811a62db47bf683&p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1th411z7sn?spm_id_from=333.788.videopod.episodes&amp;vd_source=6c74875e4fc2627ae811a62db47bf683&amp;p=3</a></p><h2 id="2-2-新建工程"><a href="#2-2-新建工程" class="headerlink" title="2-2 新建工程"></a>2-2 新建工程</h2><h3 id="操作寄存器构建STM32"><a href="#操作寄存器构建STM32" class="headerlink" title="操作寄存器构建STM32"></a>操作寄存器构建STM32</h3><ul><li><p>打开Keil5，点击Project中的New uVision Project，选择项目文件夹，给工程文件命名</p></li><li><p>选择芯片型号STM32F103C8T6，之后会弹出Keil软件新建功能小助手，叉掉</p></li><li><p>添加工程的必要文件</p><ul><li>找到启动文件：<code>固件库\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm</code>下的所有启动文件<code>ctr+a</code>、<code>ctr+c</code></li><li>回到工程文件夹下，新建文件夹<code>Start</code>，将复制的内容粘贴到里面</li><li>回到固件库的<code>STM32F10x</code>的文件夹下，有<code>stm32f10x.h文件</code>（<strong>STM32的外设寄存器描述文件，用来描述STM32有哪些寄存器和它对应的地址的</strong>）、<code>system_stm32f10x.c</code>和<code>system_stm32f10x.h</code>文件（<strong>用来配置时钟的，STM32主频72MHz，就是system文件里的函数配置的</strong>），将这三个文件复制下来，也粘贴到Start文件夹下</li><li>STM32是内核和内核外围的设备组成的，但是内核的寄存器描述和外围设备的描述文件不是在一起的，还需要添加一个内核寄存器的描述文件。找到<code>\CM3\CoreSupport\</code>下的两个cm3（Cortex-M3)(core_cm3.c和core_cm3.h)，粘贴到Start文件夹下。</li></ul></li><li><p>回到Keil软件，将刚刚复制的那些文件添加到工程里来，创建一个Start文件夹，右击添加已经存在的文件，选择All files，添加一个启动文件（后缀名md.s)，所有的.c，.h文件，按住Ctr 进行选择，Add添加</p></li><li><p>在工程选项里添加上这个文件夹的头文件路径。点击魔术棒按键，打开工程选项，在<strong>C&#x2F;C++<strong>里找到</strong>Include Paths</strong>栏点击三个点的按钮，把Start的路径添加进来</p></li><li><p>打开工程文件夹创建User文件夹，该文件夹存放main函数。回到Keil软件右击Target增加组，改名为User，右击User添加新文件main.c，路径选择工程文件夹下的User。</p></li><li><p>在main.c文件里，右击添加<code>stm32f10x.h</code>，创建一个main.c，编译并建立工程。目前这是一个寄存器工程。</p><p>选择魔术棒找到Debug，使用<code>ST-Link Debugger</code>调试器，点击Setting，找到Flash Download，勾上Reset and Run(下载程序后会立马复位执行，不需要按Reset)</p><p>查看STM32F10xxx参考手册，找到RCC寄存器下的APB2外设时钟使能寄存器(<strong>RCC_APB2ENR</strong>)</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RCC<span class="token operator">-></span>APB2ENR <span class="token operator">=</span> <span class="token number">0x00000010</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开GPIOC的时钟了  </span>    GPIOC<span class="token operator">-></span>CRH <span class="token operator">=</span> <span class="token number">0x00300000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 配置CNF13、MODE13   0011 推挽输出模式</span>    GPIOC<span class="token operator">-></span>ODR <span class="token operator">=</span> <span class="token number">0x00000000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 低电平点亮  0x00002000  熄灭</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//最后一行要为空，否则会报警告</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="操作库函数构建STM32"><a href="#操作库函数构建STM32" class="headerlink" title="操作库函数构建STM32"></a>操作库函数构建STM32</h3><ul><li><p>在原有的工程文件夹下建立Library文件夹，打开固件库的文件夹，<code>STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver</code>下有库函数的源文件和头文件，其中misc.c是内核的库函数，将其复制到Library文件夹下。</p></li><li><p>在Keil下建立Library组，将库函数添加进去。还需要一些文件，打开固件库中的<code>\STM32F10x_StdPeriph_Lib_V3.5.0\Project\STM32F10x_StdPeriph_Template</code>下的<code>stm32f10x_conf.h</code>(<strong>用来配置库函数头文件的包含关系的、还有用来参数检查的函数定义</strong>)、<code>stm32f10x_it.c、stm32f10x_it.h</code>(<strong>中断处理</strong>)，将其复制到工程下的User目录下，在Keil软件的User组下进行添加。</p></li><li><p>还需要一个宏定义。打开<code>stm32f10x.h</code>文件，发现最后一段有这几条语句，只有定义了<strong>USE_STDPERIPH_DRIVER</strong>字符串，才能包含<strong>stm32f10x_conf.h</strong>这个文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#ifdef USE_STDPERIPH_DRIVER</span>  <span class="token comment" spellcheck="true">#include "stm32f10x_conf.h"</span><span class="token comment" spellcheck="true">#endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打开魔术棒，找到C&#x2F;C++，然后定义该字符串。在头文件路径下，还要增加User和Library目录的路径。</p></li><li><p>编译后没问题，开始编写main函数</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>     </span><span class="token comment" spellcheck="true">// Device Header</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开启GPIOC的时钟</span>        GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置模式  端口  速度</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_13<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> GPIO_Pin_13<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出高电平</span>    <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> GPIO_Pin_13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出低电平</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol><li><p>启动类型选择</p><table><thead><tr><th align="left">缩写</th><th align="center">释义</th><th align="left">Flash容量</th><th>型号</th></tr></thead><tbody><tr><td align="left">LD_VL</td><td align="center">小容量产品超值系列</td><td align="left">16~32K</td><td>STM32F100</td></tr><tr><td align="left">MD_VL</td><td align="center">中容量产品超值系列</td><td align="left">64~128K</td><td>STM32F100</td></tr><tr><td align="left">HD_VL</td><td align="center">大容量产品超值系列</td><td align="left">256~512K</td><td>STM32F100</td></tr><tr><td align="left">LD</td><td align="center">小容量产品</td><td align="left">16~32K</td><td>STM32F101&#x2F;102&#x2F;103</td></tr><tr><td align="left">MD</td><td align="center">中容量产品</td><td align="left">64~128K</td><td>STM32F101&#x2F;102&#x2F;103</td></tr><tr><td align="left">HD</td><td align="center">大容量产品</td><td align="left">256~512K</td><td>STM32F101&#x2F;102&#x2F;103</td></tr><tr><td align="left">XL</td><td align="center">加大容量产品</td><td align="left">大于512K</td><td>STM32F101&#x2F;102&#x2F;103</td></tr><tr><td align="left">CL</td><td align="center">互联型产品</td><td align="left">-</td><td>STM32F105&#x2F;107</td></tr></tbody></table></li><li><p>新建工程步骤</p><ul><li>建立工程文件夹，Keil中新建工程，选择型号</li><li>工程文件夹里建立Start、Library、User等文件夹，复制固件库里面的文件到工程文件夹</li><li>工程里对应建立Start、Library、User等同名称的分组，然后将文件夹内的文件添加到工程分组里</li><li>工程选项，C&#x2F;C++，Include Paths内声明所有包含头文件的文件夹</li><li>工程选项，C&#x2F;C++，Define内定义USE_STDPERIPH_DRIVER</li><li>工程选项，Debug，下拉列表选择对应调试器，Settings，Flash Download里勾选Reset and Run</li></ul></li><li><p>工程架构</p><p><img src="https://pic.imgdb.cn/item/6761738ed0e0a243d4e5829d.png"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的搭建过程</title>
      <link href="/2024/12/16/hexo-de-da-jian-guo-cheng/"/>
      <url>/2024/12/16/hexo-de-da-jian-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客的安装过程"><a href="#hexo博客的安装过程" class="headerlink" title="hexo博客的安装过程"></a>hexo博客的安装过程</h2><blockquote><p>使用ubuntu22 进行安装，然后关联github，选择主题Matery</p></blockquote><h3 id="安装Nodejs-和-Hexo-cli"><a href="#安装Nodejs-和-Hexo-cli" class="headerlink" title="安装Nodejs 和 Hexo-cli"></a>安装Nodejs 和 Hexo-cli</h3><p>1.卸载旧版本的 Node.js:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt remove nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.安装最新版本的Node.js(如v18 LTS)</p><pre class="line-numbers language-bash"><code class="language-bash">curl -fsSL https://deb.nodesource.com/setup_18.x <span class="token operator">|</span> <span class="token function">sudo</span> -E <span class="token function">bash</span> -<span class="token function">sudo</span> apt <span class="token function">install</span> -y nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.验证安装版本</p><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.安装Hexo-cli</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-clihexo -v     <span class="token comment" spellcheck="true">#查看安装是否成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建和运行Hexo博客"><a href="#创建和运行Hexo博客" class="headerlink" title="创建和运行Hexo博客"></a>创建和运行Hexo博客</h3><p>1.创建博客项目</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> my-blog   <span class="token comment" spellcheck="true"># 创建博客目录</span><span class="token function">cd</span> my-blog      <span class="token comment" spellcheck="true"># 进入目录</span>hexo init       <span class="token comment" spellcheck="true"># 初始化 Hexo 博客</span><span class="token function">npm</span> <span class="token function">install</span>     <span class="token comment" spellcheck="true"># 安装依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.启动本地服务器</p><pre class="line-numbers language-bash"><code class="language-bash">hexo server    <span class="token comment" spellcheck="true"># 本地运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>打开浏览器，访问：<code>http://localhost:4000</code></p></li><li><p>能看到Hexo默认的博客页面</p></li></ul><p>3.创建新文章</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"我的第一篇文章"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开<code>source/_posts</code> 文件夹，找到新建的 .md 文件。</li><li>使用文本编辑器编辑文件，添加内容：<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>    <span class="token key atrule">title</span><span class="token punctuation">:</span> 我的第一篇文章<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2024-12-16 12:00:00</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Hexo<span class="token punctuation">,</span> 博客<span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>这是我的第一篇 Hexo 博客文章！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>4.生成静态文件</p><pre class="line-numbers language-bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.部署到 <strong>GitHub Pages</strong></p><ol><li><p>安装部署插件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置<code>_config.yml</code>文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/你的用户名/你的仓库.git  <span class="token comment" spellcheck="true"># git@github.com:404djl/404djl.github.io.git </span><span class="token comment" spellcheck="true"># 仓库名一定是 用户名.github.io</span><span class="token key atrule">branch</span><span class="token punctuation">:</span> main     <span class="token comment" spellcheck="true"># 仓库的分支名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>向github配置ssh密钥</p><p> 使用<code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code>命令生成SSH密钥对</p><p> 默认情况下，密钥会存储在~&#x2F;.ssh&#x2F;目录下，私钥文件名为id_rsa，公钥文件名为id_rsa.pub</p><p> 复制id_rsa.pub文件的内容，打开github，设置里的SSH，进行添加<br> <img src="https://pic.imgdb.cn/item/67603a72d0e0a243d4e4f8b7.png"></p></li><li><p>部署博客：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clean          <span class="token comment" spellcheck="true"># 清理缓存与静态文件</span>hexo generate       <span class="token comment" spellcheck="true"># 也可以 hexo g 生成静态文件</span>hexo deploy         <span class="token comment" spellcheck="true"># 也可以 hexo d 部署到远程仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
